I"cA<p>C程序编译和调试  数据类型 char类型  整型  常量  变量  运算符  优先级</p>

<h1 id="c语言基础">C语言基础</h1>

<h2 id="程序得编译和调试">程序得编译和调试</h2>

<ul>
  <li>
    <p>gcc编译器(GNU Compiler)        支持语言</p>

    <ul>
      <li>.c                                           C语言源代码</li>
      <li>.h                                           程序所包含的头文件</li>
      <li>.i                                           已经预处理过的C源代码文件</li>
      <li>.s                                           汇编语言源代码文件</li>
      <li>.o                                           编译后的目标文件</li>
    </ul>
  </li>
  <li>
    <p>gcc -o hello hello.c    也可使用 gcc hello.c -o hello</p>

    <ul>
      <li>-o                                          输出可执行文件</li>
      <li>-c                                          只要求编译器输出目标代码(.o文件)</li>
      <li>-g                                          用于调试</li>
      <li>gcc hello.c -o hello -wall   语法错误警告显示</li>
    </ul>
  </li>
  <li>
    <p>./hello                                         查看输出结果      默认为./a.out</p>
  </li>
  <li>
    <p>自带调试功能 <code class="highlighter-rouge">__FILE__, __FUNCTION__, __LINE__</code></p>
  </li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include &lt;stdio.h&gt;

int main(){
    
    int m;
    
    m=1+2+3+4+5+6+7+8+9+10;
    
    printf("%s,%s,%d m=%d\n" __FILE__, __FUNCTION__, __LINE__, m);
    
    return 0;
}



输出
	test2.c, main, 9 m=55
	
	
</code></pre></div></div>

<ul>
  <li>一个程序应当包含两部分的内容
    <ul>
      <li>对数据的描述
        <ul>
          <li>在程序中要指定数据的类型和数据的组织形式,即数据结构</li>
        </ul>
      </li>
      <li>对操作的描述
        <ul>
          <li>即操作步骤,也就是算法</li>
        </ul>
      </li>
      <li>线性结构</li>
      <li>树形结构</li>
      <li>图状结构</li>
      <li>集合结构</li>
    </ul>
  </li>
</ul>

<h2 id="数据类型">数据类型</h2>

<table>
  <thead>
    <tr>
      <th>数据类型</th>
      <th>分类</th>
      <th>子分类</th>
      <th>代表</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>基本类型</td>
      <td>整型</td>
      <td>signed(有符号)</td>
      <td>short、int、long、long long</td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td>unsigned(无符号)</td>
      <td>short、int、long、long long</td>
    </tr>
    <tr>
      <td> </td>
      <td>字符型</td>
      <td>char</td>
      <td>分有无符号</td>
    </tr>
    <tr>
      <td> </td>
      <td>实型</td>
      <td>float double</td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td>枚举型</td>
      <td>enum</td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>构造类型</td>
      <td>数组</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td>结构体</td>
      <td>struct</td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td>共用体</td>
      <td>union</td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>指针类型</td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>空类型</td>
      <td>void</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>逻辑类型</td>
      <td>bool类型</td>
      <td>true</td>
      <td>非零为真</td>
    </tr>
    <tr>
      <td> </td>
      <td>引入<stdbool.h></stdbool.h></td>
      <td>false</td>
      <td>零</td>
    </tr>
    <tr>
      <td> </td>
      <td>_Bool</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>整数类型</td>
      <td> </td>
      <td><code class="highlighter-rouge">char</code>、short、int、long</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<ul>
  <li>_Bool类型长度为1字节</li>
</ul>

<h2 id="char类型">char类型</h2>

<table>
  <thead>
    <tr>
      <th>类型名称</th>
      <th>长度(字节0)    sizeof</th>
      <th>值域</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>char</td>
      <td>1</td>
      <td>-128~127或0~255(使用/J编译选项)</td>
    </tr>
    <tr>
      <td>signed char</td>
      <td>1</td>
      <td>-128~127</td>
    </tr>
    <tr>
      <td>unsigned char</td>
      <td>1</td>
      <td>0~255</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>char c1 =128;       //数据越界(-128)        127-&gt; 01111111  +1 128-&gt;10000000 -&gt;-128   <code class="highlighter-rouge">计算机存的是补码</code></li>
  <li>char c1=129;        //数据越界(-127)</li>
  <li>unsigned char c2 =-1;   //数据越界(255)</li>
</ul>

<h2 id="整型">整型</h2>

<table>
  <thead>
    <tr>
      <th>类型名称</th>
      <th>长度(字节)</th>
      <th>值域</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>short(signed short)</td>
      <td>2</td>
      <td>-32768~32767  2^16-1</td>
    </tr>
    <tr>
      <td>unsigned short</td>
      <td>2</td>
      <td>0~65535</td>
    </tr>
    <tr>
      <td>int(signed)</td>
      <td>4</td>
      <td>-2147483648~2147483647    2^32-1</td>
    </tr>
    <tr>
      <td>unsigned int</td>
      <td>5</td>
      <td>0~4294967295</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <limits.h> 头文件 查看值域

</limits.h>
  </li>
</ul>
<h2 id="常量">常量</h2>

<ul>
  <li>整型常量                    整型                     没有二进制
    <ul>
      <li>十进制                     3356</li>
      <li>八进制                   06434                0开头</li>
      <li>十六进制               0xd1c                 0x开头</li>
    </ul>
  </li>
  <li>浮点常量                     实数                    只有十进制
    <ul>
      <li>单精度</li>
      <li>双精度</li>
      <li>一般形式                               3.5,  -12.5 ,      3.1415926</li>
      <li>指数形式                               1.176e+10         1.176 x 10^10
        <ul>
          <li>​					-3.5789e-8        -3.5789x10^(-8)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>字符常量
    <ul>
      <li>单引号里的单个字符</li>
      <li>‘A’   ‘?’</li>
      <li><code class="highlighter-rouge">字符常量具有数值</code>     ASCII值</li>
      <li>可以把字符常量看做一个字节的正整数   计算机看得是字符的数值</li>
      <li>char a,b,u,v</li>
      <li>a = ‘F’;                       //将70送给a                        a=70;</li>
      <li>b = ‘0’;                      //将48送给b                          b=48;</li>
      <li>b= ‘A’ + 2;                  //b存放的是’C’字符           b=65+2;</li>
      <li>u = ‘ ‘ + ‘B’;                 //u存放的是 ‘b’‘字符         u = 32 + 66;</li>
      <li>v = ‘b’ - 32;                //v存放的是 ‘B’ 字符          v = 98 -32;</li>
    </ul>
  </li>
  <li>字符串常量
    <ul>
      <li>双引号括起来的一串字符来表示的数据</li>
      <li>“Hello!”、”9”、”李四”、“”</li>
      <li>char arr[4] ={“abc”};                      默认有\n</li>
      <li>char arr2[4] = {‘a’,’b’,’c’,’\0’};        两者等价</li>
    </ul>
  </li>
  <li>标识常量(符号常量)
    <ul>
      <li>用标识符代替常量,其名称通常是一个标识符</li>
      <li>使用之前必须预先定义   没有分号
        <ul>
          <li>#define <标识常量名称> <常量></常量></标识常量名称></li>
          <li>#define MAX 50                                 //MAX 标识常量   称为宏</li>
          <li>#define PI 3.1415926</li>
          <li>一个标识常量,且占据一个书写行</li>
          <li>多个宏配合   注意宏只是连接
            <ul>
              <li>#define ONE 1</li>
              <li>#define TWO ONE + ONE</li>
              <li>#define THREE ONE + TWO</li>
              <li>int a =10, b=20, c;</li>
              <li>c = ONE + TWO*b + a;
                <ul>
                  <li>c的结果为1+1+1*20+10=32</li>
                </ul>
              </li>
              <li>使用括号解决
                <ul>
                  <li>#define TWO (ONE + ONE)</li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="变量">变量</h2>

<ul>
  <li>变量名
    <ul>
      <li>字母、数字、下划线组成， 不能以数字开头 不能是关键字</li>
    </ul>
  </li>
  <li>一般形式
    <ul>
      <li>
        <存储类型> <数据类型> <变量名>
</变量名></数据类型></存储类型>
      </li>
    </ul>
  </li>
  <li>变量的存储类型
    <ul>
      <li>auto                                   局部变量                默认0
        <ul>
          <li>auto int k;</li>
          <li>int j;</li>
          <li>double x;</li>
        </ul>
      </li>
      <li>register                                寄存器型(CPU的寄存器)   加快程序运行   申请不到 同auto
        <ul>
          <li>必须是能被CPU所接受的类型,通常长度小于或等于整型的长度</li>
          <li>不能用<code class="highlighter-rouge">&amp;</code>来获取register变量的地址</li>
          <li>可能会降低程序速度</li>
          <li>register int a =10;</li>
        </ul>
      </li>
      <li>static                                   全局             默认值为0
        <ul>
          <li>局部static
            <ul>
              <li>在内存中 固定地址   而不是以堆栈方式存放</li>
              <li>程序没有结束   就不会消失</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>extern
        <ul>
          <li>当变量在一个文件中的函数体外说明,所有其他文件中的函数或程序段都可引用这个变量</li>
          <li>全局变量</li>
          <li>extern int global_a;</li>
          <li>称为外部参照引用型,可悲其他文件引用, 而static不行</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="运算符">运算符</h2>

<ul>
  <li>
    <p>算术运算符</p>

    <ul>
      <li><code class="highlighter-rouge">+ - * / % ++ --</code></li>
      <li>15 / 8 =1;</li>
      <li>float % float   float/double error   小数不可取余</li>
    </ul>
  </li>
  <li>
    <p>关系运算符</p>

    <ul>
      <li><code class="highlighter-rouge">&gt;    &gt;=    &lt;     &lt;=    ==  !=</code>
        <ul>
          <li>int a =5, b=6;</li>
          <li>a &gt; (b-1)                                 //0</li>
          <li>(a+1)==b                               //1</li>
          <li>a&gt;=(b-2)                                //1</li>
          <li>a&lt;100                                    //1</li>
          <li>(a+3)&lt;=b                               //0</li>
          <li>a != (b-1)                               //0</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>逻辑运算符</p>

    <ul>
      <li><code class="highlighter-rouge">!     &amp;&amp;      ||</code></li>
      <li><code class="highlighter-rouge">&amp;&amp;</code>  短路特征-逢0截止</li>
      <li><code class="highlighter-rouge">||</code>  短路特征-逢1截止</li>
    </ul>
  </li>
  <li>
    <p>位运算符           二进制</p>

    <ul>
      <li>
        <p><code class="highlighter-rouge">~   &amp;  |  ^ &gt;&gt; &lt;&lt;</code></p>
      </li>
      <li>
        <p>unsigned char x =0x17,y;</p>

        <ul>
          <li>y=~x;                            // 0xE8</li>
        </ul>
      </li>
      <li>
        <p>位移运算</p>

        <ul>
          <li>
            <运算量> <运算符> <表达式>
</表达式></运算符></运算量>
          </li>
          <li>
            <运算量> 必须为整型结果数值
</运算量>
          </li>
          <li>
            <运算符>  &lt;&lt;  &gt;&gt;
</运算符>
          </li>
          <li>表达式     必须为整型结果数值</li>
          <li>unsigned char a = 0xe4, b;           //1110 0100</li>
          <li>b=a«3;                                           //0111 0010 0000 —&gt; 0x720     注意char类型 1个字节 8位
            <ul>
              <li>结果 为 0x20</li>
            </ul>
          </li>
          <li>实现某位<code class="highlighter-rouge">快速置1</code></li>
        </ul>

        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>unsigned char x = 0x4, y=2;    //y表示倒数第二位
x = x | (1 &lt;&lt; (y-1));          //0000 0100   --&gt;    0000 0110
							   //
							   //0000 0001   --&gt;     1
							   //0000 0010   --&gt;     1 &lt;&lt; 1
							   //0000 0110   --&gt;     x | (1 &lt;&lt; 1)
    							 
</code></pre></div>        </div>

        <ul>
          <li>实现某位<code class="highlighter-rouge">快速去1</code></li>
        </ul>

        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>unsigned char x = 0x14, y=3;
x = x &amp; (~(1 &lt;&lt; (y-1)));      //0001 0100    --&gt;    0001 0000
							  //
							  //
							  //0000 0001   --&gt;     1
							  //0000 0100   --&gt;     1 &lt;&lt; 2
							  //1111 1011   --&gt;     ~(1 &lt;&lt; 2)
							  //0001 0000   --&gt;     x &amp; (~(1 &lt;&lt; 2))
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>赋值复合运算符
    <ul>
      <li><code class="highlighter-rouge">+=  -=  *=  /=  %=  &amp;=  |=  ^=  &gt;&gt;=  &lt;&lt;=</code></li>
    </ul>
  </li>
  <li>条件运算符(三元)
    <ul>
      <li><code class="highlighter-rouge">表达式1 ? 表达式2 : 表达式3</code></li>
    </ul>
  </li>
  <li>逗号运算符     表达式的值是由最后一个表达式结果决定
    <ul>
      <li>float x =10.5,y=1.8, z=0;</li>
      <li>z = (x+=5, y = x + 0.2);                       //x =15.5 ,y =17.7 ,z =17.7</li>
      <li>z = (x=y=5, x += 1);</li>
      <li>z = (x =5, y=6, x+y);</li>
      <li>z = (z=8, x=5, y=3);</li>
    </ul>
  </li>
  <li>sizeof运算符
    <ul>
      <li>sizeof(类型或变量名)</li>
      <li>它只针对数据类型,而不针对变量</li>
      <li>int a =5;</li>
      <li>long b=3;</li>
      <li>long long c=9;</li>
      <li>sizeof(a)=4,szeof(b)=8;sizeof(c)=8</li>
      <li>sizeof(int)=4,szeof(long)=8;sizeof(long long)=8</li>
    </ul>
  </li>
</ul>

<h2 id="优先级">优先级</h2>

<table>
  <thead>
    <tr>
      <th>优先级</th>
      <th>运算符及其含义</th>
      <th>结合规律</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>[]   ()   .   -&gt;   后缀++  后缀–</td>
      <td>从左向右</td>
    </tr>
    <tr>
      <td>2</td>
      <td>前缀++   前缀–  sizeof  &amp;   ^   +  -   ~   !</td>
      <td>从右向左</td>
    </tr>
    <tr>
      <td>3</td>
      <td>强制类型转换</td>
      <td>从右向左</td>
    </tr>
    <tr>
      <td>4</td>
      <td>^    /   %   (算术乘除)</td>
      <td>从左向右</td>
    </tr>
    <tr>
      <td>5</td>
      <td>+   -    (算术加减)</td>
      <td>从左向右</td>
    </tr>
    <tr>
      <td>6</td>
      <td>«    »   (位移位)</td>
      <td>从左向右</td>
    </tr>
    <tr>
      <td>7</td>
      <td>&lt;    &lt;=   &gt;  &gt;=</td>
      <td>从左向右</td>
    </tr>
    <tr>
      <td>8</td>
      <td>==    !=</td>
      <td>从左向右</td>
    </tr>
    <tr>
      <td>9</td>
      <td>&amp;(位逻辑与)</td>
      <td>从左向右</td>
    </tr>
    <tr>
      <td>10</td>
      <td>^(位逻辑异或)</td>
      <td>从左向右</td>
    </tr>
    <tr>
      <td>11</td>
      <td>|(位逻辑或)</td>
      <td>从左向右</td>
    </tr>
    <tr>
      <td>12</td>
      <td>&amp;&amp;</td>
      <td>从左向右</td>
    </tr>
    <tr>
      <td>13</td>
      <td>||</td>
      <td>从左向右</td>
    </tr>
    <tr>
      <td>14</td>
      <td>? :</td>
      <td>从右向左</td>
    </tr>
    <tr>
      <td>15</td>
      <td>=   *=  /=  %=  +=  -=  «=  »=  &amp;=  ^=  !=   赋值运算符</td>
      <td>从右向左</td>
    </tr>
    <tr>
      <td>16</td>
      <td>,   逗号运算符</td>
      <td>从左向右</td>
    </tr>
  </tbody>
</table>

:ET